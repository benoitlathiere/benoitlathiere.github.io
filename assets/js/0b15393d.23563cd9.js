"use strict";(self.webpackChunkmadoc=self.webpackChunkmadoc||[]).push([[7721],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var u=2;u<l;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6189:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={slug:"laravel-eloquent-references",title:"Laravel Eloquent - R\xe9f\xe9rence",authors:["benoit"],tags:["Laravel","Eloquent","requ\xeate","base de donn\xe9es"],hide_table_of_contents:!1},s=void 0,o={unversionedId:"Laravel-8-Eloquent-references",id:"Laravel-8-Eloquent-references",title:"Laravel Eloquent - R\xe9f\xe9rence",description:"Dans ce dossier, je vais passer en revue les m\xe9thodes et classes propos\xe9es par l'ORM (object-relational mapping) Eloquent, choisi par l'\xe9quipe du framework Laravel. Vous trouverez sur le web des benchmarks qui montrent que les requ\xeates g\xe9n\xe9r\xe9es par Query Builder (lui aussi dans Laravel) sont plus performantes, notamment sur les grosses bases de donn\xe9es (beaucoup de lignes et des jointures complexes) ; mais si votre besoin est plus modeste, Eloquent fera parfaitement le travail et le code sera surtout plus lisible et plus simple \xe0 \xe9crire, ce qui diminue le risque d'erreur.",source:"@site/docs/Laravel-8-Eloquent-references.md",sourceDirName:".",slug:"/laravel-eloquent-references",permalink:"/docs/laravel-eloquent-references",draft:!1,tags:[{label:"Laravel",permalink:"/docs/tags/laravel"},{label:"Eloquent",permalink:"/docs/tags/eloquent"},{label:"requ\xeate",permalink:"/docs/tags/requete"},{label:"base de donn\xe9es",permalink:"/docs/tags/base-de-donnees"}],version:"current",frontMatter:{slug:"laravel-eloquent-references",title:"Laravel Eloquent - R\xe9f\xe9rence",authors:["benoit"],tags:["Laravel","Eloquent","requ\xeate","base de donn\xe9es"],hide_table_of_contents:!1},sidebar:"tutorialSidebar",next:{title:"intro",permalink:"/docs/intro"}},i={},u=[{value:"S\xe9lectionner les donn\xe9es souhait\xe9es",id:"s\xe9lectionner-les-donn\xe9es-souhait\xe9es",level:2},{value:"select() / addSelect() / selectRaw()",id:"select--addselect--selectraw",level:3},{value:"with()",id:"with",level:3},{value:"withCount() / loadCount()",id:"withcount--loadcount",level:3},{value:"withCasts()",id:"withcasts",level:3},{value:"Filtrer les donn\xe9es",id:"filtrer-les-donn\xe9es",level:2},{value:"where() / whereIn() / whereNotIn()",id:"where--wherein--wherenotin",level:3},{value:"whereBetween() / whereNotBetween()",id:"wherebetween--wherenotbetween",level:3},{value:"whereHas()",id:"wherehas",level:3},{value:"whereRaw()",id:"whereraw",level:3},{value:"whereNull() / wherenotNull()",id:"wherenull--wherenotnull",level:3},{value:"whereDate() / whereYear() / whereMonth() / whereDay() / whereTime()",id:"wheredate--whereyear--wheremonth--whereday--wheretime",level:3},{value:"whereRaw() / havingRaw()",id:"whereraw--havingraw",level:3},{value:"whereExists()",id:"whereexists",level:3},{value:"having() / havingBetween() / groupBy() / havingRaw() / orHavingRaw()",id:"having--havingbetween--groupby--havingraw--orhavingraw",level:3},{value:"orderBy() / orderByRaw() / latest() / first() / reorder() / inRandomOrder()",id:"orderby--orderbyraw--latest--first--reorder--inrandomorder",level:3},{value:"Obtenir les r\xe9sultats",id:"obtenir-les-r\xe9sultats",level:2},{value:"get()",id:"get",level:3},{value:"count()",id:"count",level:3},{value:"exists() / doesntExist()",id:"exists--doesntexist",level:3},{value:"Augmenter les r\xe9sultats",id:"augmenter-les-r\xe9sultats",level:2},{value:"load()",id:"load",level:3},{value:"Modifier les donn\xe9es",id:"modifier-les-donn\xe9es",level:2},{value:"create() / createMany()",id:"create--createmany",level:3},{value:"associate() / dissociate()",id:"associate--dissociate",level:3},{value:"save() / saveMany()",id:"save--savemany",level:3},{value:"attach() / detach() / sync() / syncWithoutDetaching() / Toggle()",id:"attach--detach--sync--syncwithoutdetaching--toggle",level:3},{value:"touch() (soft delete)",id:"touch-soft-delete",level:3},{value:"Annexes",id:"annexes",level:2},{value:"Op\xe9rateurs de comparaison",id:"op\xe9rateurs-de-comparaison",level:2},{value:"M\xe9thodes de rappel (<em>callback</em>)",id:"m\xe9thodes-de-rappel-callback",level:2},{value:"D\xe9claration d&#39;une relation dans une classe de <em>Model</em>",id:"d\xe9claration-dune-relation-dans-une-classe-de-model",level:2}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Dans ce dossier, je vais passer en revue les m\xe9thodes et classes propos\xe9es par l'ORM (",(0,a.kt)("em",{parentName:"p"},"object-relational mapping"),") ",(0,a.kt)("a",{parentName:"p",href:"https://laravel.com/docs/9.x/eloquent"},"Eloquent"),", choisi par l'\xe9quipe du framework ",(0,a.kt)("a",{parentName:"p",href:"https://laravel.com/"},"Laravel"),". Vous trouverez sur le web des benchmarks qui montrent que les requ\xeates g\xe9n\xe9r\xe9es par Query Builder (lui aussi dans Laravel) sont plus performantes, notamment sur les grosses bases de donn\xe9es (beaucoup de lignes et des jointures complexes) ; mais si votre besoin est plus modeste, Eloquent fera parfaitement le travail et le code sera surtout plus lisible et plus simple \xe0 \xe9crire, ce qui diminue le risque d'erreur."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    **Dossier en cours d'\xe9criture...**\n")),(0,a.kt)("p",null,"La plupart des m\xe9thodes pr\xe9sent\xe9es ici peuvent \xeatre ",(0,a.kt)("a",{parentName:"p",href:"https://fr.wikipedia.org/wiki/D%C3%A9signation_cha%C3%AEn%C3%A9e"},"chain\xe9es"),", c'est-\xe0-dire qu'on peut les mettre bout-\xe0-bout, car chacune renvoie une variable de type ",(0,a.kt)("em",{parentName:"p"},"Query Builder"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Fonction de rappel")),(0,a.kt)("p",null,"Certaines m\xe9thodes proposent d'utiliser une fonction de rappel (",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://fr.wikipedia.org/wiki/Fonction_de_rappel"},"callback function")),") pour ajouter des m\xe9thodes \xe0 la requ\xeate. La fonction re\xe7o\xeet la requ\xeate en param\xe8tre et doit retourner la requ\xeate, compl\xe9t\xe9e des m\xe9thodes que vous avez ajout\xe9es."),(0,a.kt)("p",null,"Ici la fonction regroupe 2 conditions, elle remplace des parenth\xe8ses pour le ",(0,a.kt)("em",{parentName:"p"},"OR")," :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// m\xe9lange de conditions OR et AND:\n// (user_id.. OR user_id..) AND role IN (...)\n$current_user_id = 5;\n$users = User::::where( function($query) use ($current_user_id) {\n            return $query->where('user_id', $current_user_id)\n                ->orWhereIn('user_id', Auth::user()->friends()->lists('id'));\n        })\n        ->whereIn('role_id', [1, 5, 7]);\n\n// \xe9quivalent en fonction fl\xe9ch\xe9e, plus courte:\n$users = User::::where( fn($query) => {\n            $query->where('user_id', $current_user_id)->orWhereIn('user_id', Auth::user()->friends()->lists('id'));\n        })\n        ->whereIn('role_id', [1, 5, 7]);\n")),(0,a.kt)("p",null,"L'\xe9quivalent en SQL :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users where (user_id = 27 OR user_id IN (12, 18, 32, 243) ) AND role_id IN (1, 5, 7);\n")),(0,a.kt)("p",null,"Les fonctions peuvent \xeatre imbriqu\xe9es les unes dans les autres, mais attention \xe0 la complexit\xe9 de la requ\xeate finale, ce n'est pas toujours facile \xe0 d\xe9bugguer !"),(0,a.kt)("h2",{id:"s\xe9lectionner-les-donn\xe9es-souhait\xe9es"},"S\xe9lectionner les donn\xe9es souhait\xe9es"),(0,a.kt)("p",null,"Je vais d'abord d\xe9crire les m\xe9thodes qui permettent d'extaire les informations (",(0,a.kt)("em",{parentName:"p"},"select statement"),") de la base de donn\xe9es."),(0,a.kt)("h3",{id:"select--addselect--selectraw"},"select() / addSelect() / selectRaw()"),(0,a.kt)("p",null,"Ces 3 m\xe9thodes indiquent \xe0 Eloquent les colonnes que l'on veut r\xe9cup\xe9rer (",(0,a.kt)("em",{parentName:"p"},"query statement"),")."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"select()")," et ",(0,a.kt)("strong",{parentName:"p"},"addSelect()")," n\xe9cessitent que l'on passe le nom des colonnes souhait\xe9es en param\xe8tres ; une liste de noms s\xe9par\xe9s par des virgules, ou dans un tableau. La deuxi\xe8me est \xe0 utiliser si l'on a d\xe9j\xe0 appel\xe9 la premi\xe8re, afin d'ajouter des colonnes non pr\xe9vues."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// on pr\xe9cise les colonnes attendues, sinon nous les auront toutes:\n$users =  User::select('id', 'first_name', 'last_name')->get();\n// ici on re\xe7oit une liste possible des colonnes par une variable (whereHas() est vu plus loin):\n$columns = ['age','date'];  // re\xe7u en param\xe8tre d'une m\xe9thode\n$users = User::select('id', 'first_name', 'last_name')->whereHas(count($colums)>0, function ($query) use ($columns) {\n    return $query->addSelect($columns); // on ajoute les colonnes\n})->get();\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"selectRaw()")," permet de d\xe9finir une colonne en langage SQL brut, ce qui peut \xeatre ^ratique si l'on veut utiliser une syntaxe impossible \xe0 \xe9crire avec les m\xe9thodes de ",(0,a.kt)("em",{parentName:"p"},"Query Builder"),". C'est une alternative \xe0 l'utilisation de ",(0,a.kt)("em",{parentName:"p"},"DB::raw()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// permet d'ajouter une colonne indiquant si l'utilisateur est majeur :\n$users = User::select('id', 'first_name', 'last_name')->selectRaw('CASE age>18 THEN 1 ELSE 0 END AS _is_adult')->get();\n")),(0,a.kt)("h3",{id:"with"},"with()"),(0,a.kt)("p",null,"Cette m\xe9thode va vous permettre d'inclure des relations en mode \"eager loading\", c'est-\xe0-dire charger la relation au plus t\xf4t, en m\xeame temps que la requ\xeate."),(0,a.kt)("p",null,'\ud83d\udca1 Cette technique charge en m\xe9moire l\'ensemble des lignes de la relation en une seule requ\xeate, plut\xf4t que d\'appeler la relation \xe0 chaque appel du mod\xe8le ("lazy loading"), donc avec une requ\xeate \xe0 chaque fois. Ce probl\xe8me de chargement tardif est appel\xe9 "N+1", car il n\xe9cessite N+1 requ\xeates : la requ\xeate initiale + une requ\xeate \xe0 chaque appel de la relation. En revanche, vous chargez les \xe9l\xe9ments de la relation \xe0 la demande,au fur et \xe0 mesure, sans encombrer la m\xe9moire.'),(0,a.kt)("p",null,'\ud83d\ude0a Le "eager loading" va ne faire que 2 requ\xeate : la requ\xeate du mod\xe8le principal, et la requ\xeate de la relation (qui r\xe9cup\xe8re toutes les occurenences n\xe9cessaires). A contrario, quelle technique suppose que Laravel va charger en m\xe9moire toutes les occurences, m\xeame si vous les utilisez pas n\xe9cessairement toutes. Avec de nombreuses relations importantes, vous risquez saturez la m\xe9moire allou\xe9e \xe0 PHP.'),(0,a.kt)("p",null,"La relation qui peut \xeatre charg\xe9e doit \xeatre d\xe9clar\xe9e dans la classe du mod\xe8le (voir ",(0,a.kt)("a",{parentName:"p",href:"#d%C3%A9claration-dune-relation-dans-une-classe-de-model"},"annexe"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::select('id', 'first_name', 'last_name')->with('posts')->get();\nforeach($users as $user) {\n    $user->post->id;    // la propri\xe9t\xe9 est au singulier, m\xeame si la relation est au pluriel.\n}\n")),(0,a.kt)("h3",{id:"withcount--loadcount"},"withCount() / loadCount()"),(0,a.kt)("p",null,"La m\xe9thode fait la somme du nombre lignes d'une relation (voir ",(0,a.kt)("a",{parentName:"p",href:"#d%C3%A9claration-dune-relation-dans-une-classe-de-model"},"annexe"),") li\xe9e \xe0 la requ\xeate principale. Elle combine \xe0 la fois ",(0,a.kt)("em",{parentName:"p"},"with()")," d'Eloquent et ",(0,a.kt)("em",{parentName:"p"},"count()")," de SQL. La m\xe9thode cr\xe9\xe9 une propri\xe9t\xe9 qui est la concat\xe9nation du nom de la relation et du mot '","_","count'. La relation, comme souvent avec Eloquent, est une sous-class de ",(0,a.kt)("em",{parentName:"p"},"Builder"),". La m\xe9thode accepte plusieurs relations, un callback, et m\xeame un alias."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// on compte le nombre de posts pour chaque utilisateur :\n$users = User::select('id', 'first_name', 'last_name')->withCount('posts')->get();\n// acc\xe8s \xe0 la propri\xe9t\xe9 :\n$users->first()->posts_count;\n// on peut mettre plusieurs relations utiliser un callback, et mettre un alias :\n$users = User::select('id', 'first_name', 'last_name')->withCount(['posts', 'friends as nb_adults' => function (Builder $query) {\n    $query->where('age', '>=', 18);\n}])->get();\n$users[0]->posts_count;\n$users[0]->nb_adults;\n")),(0,a.kt)("p",null,"\u26a0\ufe0f Si vous utiliser ",(0,a.kt)("em",{parentName:"p"},"select()")," dans la requ\xeate, il faut appeler ",(0,a.kt)("em",{parentName:"p"},"withCount()")," apr\xe8s ",(0,a.kt)("em",{parentName:"p"},"select()"),"."),(0,a.kt)("p",null,"Vous pouvez utiliser ",(0,a.kt)("em",{parentName:"p"},"loadCount()")," sur la collection qui r\xe9sulte de la requ\xeate, avec les m\xeames possibilit\xe9s (relations, callback, alias)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::select('id', 'first_name', 'last_name')->get();\n$users->loadCount(['posts', 'friends as nb_adults' => function (Builder $query) {\n    $query->where('age', '>=', 18);\n}]);\n")),(0,a.kt)("h3",{id:"withcasts"},"withCasts()"),(0,a.kt)("p",null,"..."),(0,a.kt)("h2",{id:"filtrer-les-donn\xe9es"},"Filtrer les donn\xe9es"),(0,a.kt)("p",null,"Maintenant on va voir comment filtrer les donn\xe9es, c'est-\xe0-dire comment ecarter celles qui ne nous int\xe9ressent pas."),(0,a.kt)("h3",{id:"where--wherein--wherenotin"},"where() / whereIn() / whereNotIn()"),(0,a.kt)("p",null,"Toutes les m\xe9thodes commen\xe7ant par ",(0,a.kt)("em",{parentName:"p"},"where*")," permettent d'indiquer des conditions pour filtrer (conserver) les donn\xe9es correspondant aux crit\xe8res sp\xe9cifi\xe9s. Ces m\xe9thodes ont plusieurs signatures et les param\xe8tres pass\xe9s sont variables. Plusieurs possibilti\xe9s :"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"2 param\xe8tres, la colonne et la valeur qui doit \xeatre identique (comparaison d'\xe9galit\xe9)."),(0,a.kt)("li",{parentName:"ol"},"3 param\xe8tres, le 2\xe8me \xe9tant l'op\xe9rateur de comparaison (voir ",(0,a.kt)("a",{parentName:"li",href:"#d%C3%A9claration-dune-relation-dans-une-classe-de-model"},"annexe"),")."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("del",{parentName:"li"},"2 param\xe8tres, avec une fonction de rappel."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// 1. comparaison d'\xe9galit\xe9 implicite:\n$users = User::select('id', 'first_name', 'last_name')->where('age', 18)->get();\n\n// 2. comparaison explicite:\n$users = User::select('id', 'first_name', 'last_name')->where('age', '>=', 18)->get();\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"whereIn(), whereNotIn()")," v\xe9rifient que la valeur d'une colonne est ou n'est pas pr\xe9sente dans un tableau."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::select('id', 'first_name', 'last_name')->where('status', ['active', 'idle','standby'])->get();\n$users = User::select('id', 'first_name', 'last_name')->whereNotIn('prefered_language', ['Cobol', 'C','Ada'])->get();\n")),(0,a.kt)("p",null,"\xc9galement disponibles :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"orWhere()"),(0,a.kt)("li",{parentName:"ul"},"orWhereIn()"),(0,a.kt)("li",{parentName:"ul"},"orWhereNotIn()")),(0,a.kt)("h3",{id:"wherebetween--wherenotbetween"},"whereBetween() / whereNotBetween()"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://laravel.com/api/5.8/Illuminate/Database/Query/Builder.html#method_whereBetween"},"whereBetween()"),", orWhereBetween(), whereNotBetween(), orWhereNotBetween()")," v\xe9rifient ou non une valeur num\xe9rique entre 2 bornes incluses."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// l'\xe2ge entre 18 et 100:\n$users = User::select('id', 'first_name', 'last_name')->whereBetween('age', [18, 100])->get();\n// l'\xe2ge hors 18 \xe0 100:\n$users = User::select('id', 'first_name', 'last_name')->whereNotBetween('age', [18, 100])->get();\n")),(0,a.kt)("p",null,"\xc9galement disponibles :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"orWhereBetween()"),(0,a.kt)("li",{parentName:"ul"},"orWhereNotBetween()")),(0,a.kt)("h3",{id:"wherehas"},"whereHas()"),(0,a.kt)("p",null,"Cette m\xe9thode v\xe9rifie la pr\xe9sence d'une ou plusieurs relations avec le mod\xe8le interrog\xe9.\nPar exemple, si votre mod\xe8le  ",(0,a.kt)("em",{parentName:"p"},"User")," est li\xe9 \xe0 des ",(0,a.kt)("em",{parentName:"p"},"Article"),", vous pouvez vouloir n'avoir que les ",(0,a.kt)("em",{parentName:"p"},"User")," qui poss\xe8dent des ",(0,a.kt)("em",{parentName:"p"},"Articles"),", ou l'inverse."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::whereHas('articles')->get();\n")),(0,a.kt)("h3",{id:"whereraw"},"whereRaw()"),(0,a.kt)("p",null,"Comme pour ",(0,a.kt)("strong",{parentName:"p"},"selectRaw()"),", on peut \xe9crire une condition avec la syntaxe SQL native."),(0,a.kt)("p",null,"\xc9galement disponibles :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"orWhereRaw()")),(0,a.kt)("h3",{id:"wherenull--wherenotnull"},"whereNull() / wherenotNull()"),(0,a.kt)("p",null,"\xc9galement disponibles :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"...")),(0,a.kt)("h3",{id:"wheredate--whereyear--wheremonth--whereday--wheretime"},"whereDate() / whereYear() / whereMonth() / whereDay() / whereTime()"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"whereDate()")," fait une comparaison sur une colonne contenant au moins une date (et m\xeame si la colonne est de type ",(0,a.kt)("em",{parentName:"p"},"datetime")," ou ",(0,a.kt)("em",{parentName:"p"},"timestamp"),"). Le temps (heure, minute, seconde..) sont ignor\xe9s dans la comparaison."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"whereDay()")," et ",(0,a.kt)("em",{parentName:"p"},"whereMonth()")," font une comparaison sur uniquement, respectivement, sur le jour ou le mois d'un champ contenant au moins une date. De la m\xeame mani\xe8re, ",(0,a.kt)("em",{parentName:"p"},"whererYear()")," ne compare que l'ann\xe9e elle-m\xeame, sans tenir compte du reste."),(0,a.kt)("p",null,"Enfin, ",(0,a.kt)("em",{parentName:"p"},"whereTime()")," ne compare que le temps (heure, mniute, seconde) selon le ",(0,a.kt)("a",{parentName:"p",href:"https://www.php.net/manual/fr/datetime.format.php"},"format PHP")," ",(0,a.kt)("em",{parentName:"p"},"H:i:s"),"."),(0,a.kt)("p",null,"Ces m\xe9thodes vous \xe9vite de faire appel aux m\xe9thodes SQL d'extraction des diff\xe9rentes parties d'une date."),(0,a.kt)("p",null,"\xc9galement disponibles :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"...")),(0,a.kt)("h3",{id:"whereraw--havingraw"},"whereRaw() / havingRaw()"),(0,a.kt)("h3",{id:"whereexists"},"whereExists()"),(0,a.kt)("p",null,"\xc9galement disponibles :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"...")),(0,a.kt)("h3",{id:"having--havingbetween--groupby--havingraw--orhavingraw"},"having() / havingBetween() / groupBy() / havingRaw() / orHavingRaw()"),(0,a.kt)("h3",{id:"orderby--orderbyraw--latest--first--reorder--inrandomorder"},"orderBy() / orderByRaw() / latest() / first() / reorder() / inRandomOrder()"),(0,a.kt)("h2",{id:"obtenir-les-r\xe9sultats"},"Obtenir les r\xe9sultats"),(0,a.kt)("h3",{id:"get"},"get()"),(0,a.kt)("p",null,"Cette m\xe9thode permet tout simplement d'obtenir le r\xe9sultat de la requ\xeate. ",(0,a.kt)("em",{parentName:"p"},"get()")," g\xe9n\xe8re une ",(0,a.kt)("a",{parentName:"p",href:"https://laravel.com/api/master/Illuminate/Database/Eloquent/Collection.html"},"Collection")," du mod\xe8le interrog\xe9 (compatible avec ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://laravel.com/docs/master/eloquent-collections"},"Illuminate\\Support\\Collection")),"."),(0,a.kt)("h3",{id:"count"},"count()"),(0,a.kt)("p",null,"Au lieu de r\xe9cup\xe9rer les donn\xe9es avec ",(0,a.kt)("em",{parentName:"p"},"get()")," puis de compter les lignes, il est possibles d'appeler la m\xe9thode ",(0,a.kt)("em",{parentName:"p"},"count()")," directement en fin de requ\xeate ",(0,a.kt)("em",{parentName:"p"},"Builder"),"."),(0,a.kt)("h3",{id:"exists--doesntexist"},"exists() / doesntExist()"),(0,a.kt)("p",null,"Ces m\xe9thodes appel\xe9es en fin de ",(0,a.kt)("em",{parentName:"p"},"Builder")," renvoient un bool\xe9en indiquant si au moins 1 occurence correspond \xe0 la recherche. Ces m\xe9thodes \xe9vitent de renvoyer des lignes qui n'auraient d'int\xe9r\xeat que pour le comptage."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// v\xe9rifier l'existence de lignes :\n$rowsExist = $user = User::whereHas('articles')->count() > 0;\n//devient :\n$rowsExist = $user = User::whereHas('articles')->exists();\n// v\xe9rifier l'absence' de lignes :\n$rowsDoesntExist = $user = User::whereHas('articles')->count() == 0;\n// devient :\n$rowsDoesntExist = $user = User::whereHas('articles')->doesntExist();\n")),(0,a.kt)("h2",{id:"augmenter-les-r\xe9sultats"},"Augmenter les r\xe9sultats"),(0,a.kt)("h3",{id:"load"},"load()"),(0,a.kt)("p",null,"...."),(0,a.kt)("h2",{id:"modifier-les-donn\xe9es"},"Modifier les donn\xe9es"),(0,a.kt)("h3",{id:"create--createmany"},"create() / createMany()"),(0,a.kt)("p",null,"..."),(0,a.kt)("h3",{id:"associate--dissociate"},"associate() / dissociate()"),(0,a.kt)("p",null,"..."),(0,a.kt)("h3",{id:"save--savemany"},"save() / saveMany()"),(0,a.kt)("h3",{id:"attach--detach--sync--syncwithoutdetaching--toggle"},"attach() / detach() / sync() / syncWithoutDetaching() / Toggle()"),(0,a.kt)("h3",{id:"touch-soft-delete"},"touch() (soft delete)"),(0,a.kt)("h2",{id:"annexes"},"Annexes"),(0,a.kt)("h2",{id:"op\xe9rateurs-de-comparaison"},"Op\xe9rateurs de comparaison"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"=  : \xe9gal \xe0,"),(0,a.kt)("li",{parentName:"ul"},"<  : inf\xe9rieur \xe0,"),(0,a.kt)("li",{parentName:"ul"},">","  : sup\xe9rieur \xe0,"),(0,a.kt)("li",{parentName:"ul"},"<= : inf\xe9rieur ou \xe9gal \xe0,"),(0,a.kt)("li",{parentName:"ul"},">","= : sup\xe9rieur ou \xe9gal \xe0,"),(0,a.kt)("li",{parentName:"ul"},"!= : diff\xe9rent de.")),(0,a.kt)("h2",{id:"m\xe9thodes-de-rappel-callback"},"M\xe9thodes de rappel (",(0,a.kt)("em",{parentName:"h2"},"callback"),")"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"...\n    function($query){\n        $query->where('age', '>=', 18);\n    }\n...\n")),(0,a.kt)("h2",{id:"d\xe9claration-dune-relation-dans-une-classe-de-model"},"D\xe9claration d'une relation dans une classe de ",(0,a.kt)("em",{parentName:"h2"},"Model")),(0,a.kt)("p",null,"Plusieurs m\xe9thodes font appel \xe0 une relation du mod\xe8le."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// d\xe9claraton de la relation :\nclass User extends Model {\n    // relation one-to-one :\n    public function entity(): HasOne\n    {\n        return $this->hasOne(Entity::class);\n    }\n    // relation One-to-many :\n    public function posts(): HasMany\n    {\n        return $this->hasMany(Post::class);\n    }\n}\n")))}d.isMDXComponent=!0}}]);